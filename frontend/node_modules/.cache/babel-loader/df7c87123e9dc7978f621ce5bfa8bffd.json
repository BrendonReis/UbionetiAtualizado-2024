{"ast":null,"code":"import React,{useState,useRef,useEffect,useContext}from\"react\";import{useHistory}from\"react-router-dom\";import{format}from\"date-fns\";import{SocketContext}from\"../../context/Socket/SocketContext\";import useSound from\"use-sound\";import Popover from\"@material-ui/core/Popover\";import IconButton from\"@material-ui/core/IconButton\";import List from\"@material-ui/core/List\";import ListItem from\"@material-ui/core/ListItem\";import ListItemText from\"@material-ui/core/ListItemText\";import{makeStyles}from\"@material-ui/core/styles\";import Badge from\"@material-ui/core/Badge\";import ChatIcon from\"@material-ui/icons/Chat\";import TicketListItem from\"../TicketListItemCustom\";import useTickets from\"../../hooks/useTickets\";import alertSound from\"../../assets/sound.mp3\";import{AuthContext}from\"../../context/Auth/AuthContext\";import{i18n}from\"../../translate/i18n\";import toastError from\"../../errors/toastError\";const useStyles=makeStyles(theme=>({tabContainer:{overflowY:\"auto\",maxHeight:350,...theme.scrollbarStyles},popoverPaper:{width:\"100%\",maxWidth:350,marginLeft:theme.spacing(2),marginRight:theme.spacing(1),[theme.breakpoints.down(\"sm\")]:{maxWidth:270}},noShadow:{boxShadow:\"none !important\"}}));const NotificationsPopOver=_ref=>{let{volume}=_ref;const classes=useStyles();const history=useHistory();const{user}=useContext(AuthContext);const ticketIdUrl=+history.location.pathname.split(\"/\")[2];const ticketIdRef=useRef(ticketIdUrl);const anchorEl=useRef();const[isOpen,setIsOpen]=useState(false);const[notifications,setNotifications]=useState(()=>{const savedNotifications=localStorage.getItem(\"notifications\");return savedNotifications?JSON.parse(savedNotifications):[];});const[showPendingTickets,setShowPendingTickets]=useState(false);const[,setDesktopNotifications]=useState([]);const{tickets}=useTickets({withUnreadMessages:\"true\"});const[play]=useSound(alertSound,volume);const soundAlertRef=useRef();const historyRef=useRef(history);const socketManager=useContext(SocketContext);useEffect(()=>{const fetchSettings=async()=>{try{if(user.allTicket===\"enable\"){setShowPendingTickets(true);}}catch(err){toastError(err);}};fetchSettings();},[user]);useEffect(()=>{soundAlertRef.current=play;if(!(\"Notification\"in window)){console.log(\"Este navegador não suporta notificações\");}else{Notification.requestPermission();}},[play]);useEffect(()=>{const processNotifications=()=>{if(showPendingTickets){setNotifications(tickets);}else{const newNotifications=tickets.filter(ticket=>ticket.status!==\"pending\");setNotifications(newNotifications);}};processNotifications();},[tickets,showPendingTickets]);useEffect(()=>{ticketIdRef.current=ticketIdUrl;},[ticketIdUrl]);useEffect(()=>{const socket=socketManager.getSocket(user.companyId);socket.on(\"ready\",()=>socket.emit(\"joinNotification\"));socket.on(\"company-\".concat(user.companyId,\"-notification\"),data=>{console.log(\"Notificação recebida:\",data);if(data.action===\"pendingTicket\"){handleNotifications(data);}});socket.on(\"company-\".concat(user.companyId,\"-ticket\"),data=>{if(data.action===\"updateUnread\"||data.action===\"delete\"){setNotifications(prevState=>{return prevState.filter(t=>t.id!==data.ticketId);});setDesktopNotifications(prevState=>{const notificationIndex=prevState.findIndex(n=>n.tag===String(data.ticketId));if(notificationIndex!==-1){prevState[notificationIndex].close();prevState.splice(notificationIndex,1);return[...prevState];}return prevState;});}});socket.on(\"company-\".concat(user.companyId,\"-appMessage\"),data=>{var _user$queues;if(data.action===\"create\"&&!data.message.fromMe&&data.ticket.status!==\"autoassigned\"&&data.ticket.status!==\"pending\"&&(!data.message.read||data.ticket.status===\"autoassigned\")&&(!data.message.read||data.ticket.status===\"pending\")&&(data.ticket.userId===(user===null||user===void 0?void 0:user.id)||!data.ticket.userId)&&((user===null||user===void 0?void 0:(_user$queues=user.queues)===null||_user$queues===void 0?void 0:_user$queues.some(queue=>queue.id===data.ticket.queueId))||!data.ticket.queueId)){setNotifications(prevState=>{const ticketIndex=prevState.findIndex(t=>t.id===data.ticket.id);if(ticketIndex!==-1){prevState[ticketIndex]=data.ticket;return[...prevState];}return[data.ticket,...prevState];});const shouldNotNotificate=data.message.ticketId===ticketIdRef.current&&document.visibilityState===\"visible\"||data.ticket.userId&&data.ticket.userId!==(user===null||user===void 0?void 0:user.id)||data.ticket.isGroup;if(shouldNotNotificate)return;handleNotifications(data);}});return()=>{socket.disconnect();};},[user,showPendingTickets,socketManager]);const handleNotifications=data=>{var _ticket$contact;console.log(\"Processando notificação:\",data);const{action,message,ticket}=data;if(!ticket||!ticket.id){console.log(\"Ticket inválido ou sem ID. Ignorando a notificação.\");return;}const currentDate=new Date();const ticketDueDate=new Date(ticket.dueDate);if(ticketDueDate<currentDate&&ticket.status!==\"closed\"&&ticket.status!==\"reopened\"){console.log(\"Ticket \".concat(ticket.id,\" est\\xE1 atrasado. Vencimento: \").concat(format(ticketDueDate,\"dd/MM/yyyy\"),\" | Data atual: \").concat(format(currentDate,\"dd/MM/yyyy\")));}else{console.log(\"Ticket \".concat(ticket.id,\" n\\xE3o est\\xE1 atrasado. Status: \").concat(ticket.status));}const savedNotifications=JSON.parse(localStorage.getItem(\"notifications\"))||[];const existingNotificationIndex=savedNotifications.findIndex(notif=>notif.id===ticket.id);if(existingNotificationIndex!==-1){console.log(\"Correspond\\xEAncia encontrada para o ticket \".concat(ticket.id,\": \").concat(JSON.stringify(ticket)));savedNotifications[existingNotificationIndex]={...savedNotifications[existingNotificationIndex],...ticket,message};}else{console.log(\"Adicionando novo ticket \".concat(ticket.id,\": \").concat(JSON.stringify(ticket)));const newNotification={...ticket,message,action};savedNotifications.push(newNotification);}localStorage.setItem(\"notifications\",JSON.stringify(savedNotifications));setNotifications(savedNotifications);// Detalhamento da notificação que está sendo criada\nconst options={body:\"\".concat(message,\" - \").concat(format(new Date(),\"HH:mm\")),icon:((_ticket$contact=ticket.contact)===null||_ticket$contact===void 0?void 0:_ticket$contact.profilePicUrl)||'default_icon_url.png',tag:ticket.id,renotify:true};console.log(\"Criando notifica\\xE7\\xE3o para o ticket \".concat(ticket.id,\" com o t\\xEDtulo: \\\"Notifica\\xE7\\xE3o sobre o ticket \").concat(ticket.id,\"\\\"\"));const notification=new Notification(\"Notifica\\xE7\\xE3o sobre o ticket \".concat(ticket.id),options);notification.onclick=e=>{e.preventDefault();console.log(\"Notifica\\xE7\\xE3o do ticket \".concat(ticket.id,\" clicada, redirecionando para o ticket.\"));window.focus();historyRef.current.push(\"/tickets/\".concat(ticket.id));};soundAlertRef.current();};const handleClick=()=>{setIsOpen(prevState=>!prevState);};const handleClickAway=()=>{setIsOpen(false);};const NotificationTicket=_ref2=>{let{children}=_ref2;return/*#__PURE__*/React.createElement(\"div\",{onClick:handleClickAway},children);};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(IconButton,{onClick:handleClick,ref:anchorEl,\"aria-label\":\"Open Notifications\",color:\"inherit\",style:{color:\"white\"}},/*#__PURE__*/React.createElement(Badge,{overlap:\"rectangular\",badgeContent:notifications.length,color:\"secondary\"},/*#__PURE__*/React.createElement(ChatIcon,null))),/*#__PURE__*/React.createElement(Popover,{disableScrollLock:true,open:isOpen,anchorEl:anchorEl.current,anchorOrigin:{vertical:\"bottom\",horizontal:\"right\"},transformOrigin:{vertical:\"top\",horizontal:\"right\"},classes:{paper:classes.popoverPaper},onClose:handleClickAway},/*#__PURE__*/React.createElement(List,{dense:true,className:classes.tabContainer},notifications.length===0?/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(ListItemText,{primary:i18n.t(\"notifications.noTickets\")})):notifications.map(ticket=>/*#__PURE__*/React.createElement(NotificationTicket,{key:ticket.id},/*#__PURE__*/React.createElement(TicketListItem,{ticket:ticket}))))));};export default NotificationsPopOver;","map":null,"metadata":{},"sourceType":"module"}